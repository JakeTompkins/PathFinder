(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(t,e,n){},15:function(t,e,n){"use strict";n.r(e);var a=n(0),s=n.n(a),r=n(7),i=n.n(r),o=(n(14),n(1)),l=n(2),c=n(4),u=n(3),d=n(5),h=function(t){function e(){return Object(o.a)(this,e),Object(c.a)(this,Object(u.a)(e).apply(this,arguments))}return Object(d.a)(e,t),Object(l.a)(e,[{key:"render",value:function(){var t=this.props,e=t.passable,n=t.start,a=t.end,r=t.passed,i=(t.distance,t.hidden);return s.a.createElement("div",{className:"node".concat(e?"":" unpassable").concat(n?" start":"").concat(a?" end":"").concat(r?" passed":"").concat(i?" hidden":""),onClick:this.props.onClick})}}]),e}(a.Component),p=function t(e){var n=this;Object(o.a)(this,t),this.push=function(t){if(!n.head)return n.head={node:t,next:null},void n.length++;for(var e=n.head;null!=e.next;)e=e.next;e.next={node:t,next:null},n.length++},this.unshift=function(){var t=n.head;return n.head=n.head.next,n.length--,t.node},this.head={node:e,next:null},this.length=1},f=function t(e){var n=this;Object(o.a)(this,t),this.togglePassable=function(){n.passable=!n.passable},this.togglePassed=function(){n.passed=!n.passed},this.setDistance=function(t){n.distance=t},this.setVisited=function(){n.visited=!0},this.toggleHidden=function(){n.hidden=!n.hidden},this.row=e.row,this.col=e.col,this.passable=null===e.passable||e.passable,this.passed=!1,this.distance=null,this.hidden=e.hidden||!1,this.visited=!1},m=function(t){return s.a.createElement("p",{className:"instructions"},t.text)},v=function(t){function e(t){var n;return Object(o.a)(this,e),(n=Object(c.a)(this,Object(u.a)(e).call(this,t))).populateMatrix=function(){for(var t=[],e=n.props,a=e.height,s=e.width,r=0;r<a;r++){for(var i=[],o=0;o<s;o++){var l=new f({row:r,col:o});l.passable=!0,i.push(l)}t.push(i)}n.setState({matrix:t},function(){n.setRandomStartAndEnd()})},n.getCell=function(t,e){return n.state.matrix[t][e]},n.getRandomCell=function(){var t=n.props,e=t.height,a=t.width,s=Math.floor(Math.random()*e),r=Math.floor(Math.random()*a);return n.getCell(s,r)},n.setRandomStartAndEnd=function(){var t=n.getRandomCell(),e=n.getRandomCell();if(t===e)return n.setRandomStartAndEnd();e.setDistance(0),n.setState({start:t,end:e})},n.getAdjacents=function(t){var e=t.row,a=t.col,s=n.props,r=s.height,i=s.width;return[e>0?n.getCell(e-1,a):null,e<r-1?n.getCell(e+1,a):null,a>0?n.getCell(e,a-1):null,a<i-1?n.getCell(e,a+1):null]},n.nextStep=function(t){var e=n.getAdjacents(t),a=null,s=null;return e.forEach(function(t){null!==t&&null!==t.distance&&(null===a||a>t.distance)&&(a=t.distance,s=t)}),s},n.start=function(){var t=n.state.start,e=setInterval(function(){if((t=n.nextStep(t))===n.state.end||null===t)return clearInterval(e);t.togglePassed(),n.setState(n.state)},250);n.setState({intId:e})},n.onCellClick=function(t){t.togglePassable(),n.setState(n.state)},n.onStartClick=function(){n.buildMap()},n.onResetClick=function(){clearInterval(n.state.intId),n.populateMatrix()},n.state={matrix:[],start:null,end:null},n.instructions="This is a Breadth-First algorithm used to determine the shortest possible route from the green start square to the red end square. It assumes that the computer has knowledge of the full state of the board. Create a maze for it to solve by clicking on squares to make them unpassable. Be sure not to block either square in completely!",n}return Object(d.a)(e,t),Object(l.a)(e,[{key:"componentDidMount",value:function(){this.populateMatrix()}},{key:"buildMap",value:function(){for(var t=this,e=new p(this.state.end),n=function(){var n=e.unshift();t.getAdjacents(n).forEach(function(t){null!==t&&null==t.distance&&t.passable&&(t.setDistance(n.distance+1),e.push(t))})};e.length>0;)n();this.setState(this.state,function(){t.start()})}},{key:"render",value:function(){var t=this,e=0;return s.a.createElement("div",{className:"grid"},this.state.matrix.map(function(n){return e++,s.a.createElement("div",{className:"row",key:e},n.map(function(e){return s.a.createElement(h,{key:"".concat(e.row).concat(e.col),passed:e.passed,passable:e.passable,start:e===t.state.start,end:e===t.state.end,hidden:e.hidden,onClick:function(){return t.onCellClick(e)}})}))}),s.a.createElement(m,{text:this.instructions}),s.a.createElement("div",{className:"buttonRow"},s.a.createElement("div",{className:"button",onClick:function(){t.onStartClick()}},"Start"),s.a.createElement("div",{className:"button",onClick:function(){t.onResetClick()}},"Reset")))}}]),e}(a.Component),g=function t(e){var n=this;Object(o.a)(this,t),this.push=function(t){n.array.push(t),n.length++},this.pop=function(){return n.length--,n.array.pop()},this.array=e?[e]:[],this.length=this.array.length},b=function(t){function e(t){var n;return Object(o.a)(this,e),(n=Object(c.a)(this,Object(u.a)(e).call(this,t))).populateMatrix=function(){for(var t=n.props,e=t.height,a=t.width,s=[],r=0;r<e;r++){for(var i=[],o=0;o<a;o++){var l=!(Math.floor(11*Math.random())<4),c=new f({hidden:!0,passable:l,row:r,col:o});i.push(c)}s.push(i)}n.setState({matrix:s},function(){n.setRandomStartAndEnd()})},n.getCell=function(t,e){return n.state.matrix[t][e]},n.randomCell=function(){var t=n.props,e=t.height,a=t.width,s=Math.floor(Math.random()*e),r=Math.floor(Math.random()*a);return n.getCell(s,r)},n.setRandomStartAndEnd=function(){var t=n.randomCell(),e=n.randomCell();if(t===e)return n.setRandomStartAndEnd();t.passable=!0,t.hidden=!1,e.passable=!0,e.hidden=!1,n.setState({start:t,end:e})},n.lookUp=function(t){var e=t.row,a=t.col;return e>0?n.state.matrix[e-1][a]:null},n.lookDown=function(t){var e=t.row,a=t.col;return e<n.props.height-1?n.state.matrix[e+1][a]:null},n.lookLeft=function(t){var e=t.row,a=t.col;return a>0?n.state.matrix[e][a-1]:null},n.lookRight=function(t){var e=t.row,a=t.col;return a<n.props.width-1?n.state.matrix[e][a+1]:null},n.getNextAdjacent=function(t){var e=[n.lookUp(t),n.lookDown(t),n.lookLeft(t),n.lookRight(t)].filter(function(t){return t&&!t.visited}),a=e.filter(function(t){return t===n.state.end});return a.length>0?a[0]:e[Math.floor(Math.random()*e.length)]},n.nextStep=function(t){var e=n.getNextAdjacent(t);return e?(e!==n.state.start&&e!==n.state.end&&(e.toggleHidden(),n.setState(n.state)),e.passable?e:(e.setVisited(),n.nextStep(t))):null},n.start=function(){var t=new g(n.state.start),e=n.state.start;e.setVisited();var a=setInterval(function(){var s=!e;if(n.setState({noPath:s,intId:a}),s||e===n.state.end)return clearInterval(a);var r=n.nextStep(e);if(!r)return e.togglePassed(),void(e=t.pop());t.push(e),(e=r).setVisited(),e.togglePassed(),n.setState(n.state)},250)},n.onStartClick=function(){n.start()},n.onResetClick=function(){clearInterval(n.state.intId),n.populateMatrix()},n.state={matrix:[],start:null,end:null,noPath:!1,intId:null},n.instructions="This is a Depth-First algorithm used to find a path from the green start square to the red end square. The path it finds will not be optimized due to the computer only being aware of squares that it has traversed. The maze is randomly generated and will sometimes be unpassable, in which case the path will retrace to the start square and come to an end.",n}return Object(d.a)(e,t),Object(l.a)(e,[{key:"componentDidMount",value:function(){this.populateMatrix()}},{key:"render",value:function(){var t=this,e=0;return s.a.createElement("div",{className:"grid"},this.state.matrix.map(function(n){return e++,s.a.createElement("div",{className:"row",key:e},n.map(function(e){return s.a.createElement(h,{key:"".concat(e.row).concat(e.col),passed:e.passed,passable:e.passable,start:e===t.state.start,end:e===t.state.end,hidden:e.hidden})}))}),s.a.createElement(m,{text:this.instructions}),s.a.createElement("div",{className:"buttonRow"},s.a.createElement("div",{className:"button",onClick:function(){t.onStartClick()}},"Start"),s.a.createElement("div",{className:"button",onClick:function(){t.onResetClick()}},"Reset")))}}]),e}(a.Component),w=function(t){function e(t){var n;return Object(o.a)(this,e),(n=Object(c.a)(this,Object(u.a)(e).call(this,t))).nextGrid=function(){n.setState(function(t){var e=t.shownGridIndex;return{shownGridIndex:e=e===n.props.grids.length-1?0:e+1}})},n.state={shownGridIndex:0},n}return Object(d.a)(e,t),Object(l.a)(e,[{key:"render",value:function(){var t=this.props.grids,e=this.state.shownGridIndex;return s.a.createElement(s.a.Fragment,null,t[e],s.a.createElement("div",{className:"button",id:"switchButton",onClick:this.nextGrid},"Switch Algorithms"))}}]),e}(a.Component);var k=function(){return s.a.createElement("div",{className:"main"},s.a.createElement("h1",{className:"title"},"PathFinder"),s.a.createElement("div",{className:"container"},s.a.createElement(w,{grids:[s.a.createElement(v,{height:10,width:10}),s.a.createElement(b,{height:10,width:10})]})))};i.a.render(s.a.createElement(k,null),document.getElementById("root"))},8:function(t,e,n){t.exports=n(15)}},[[8,1,2]]]);
//# sourceMappingURL=main.18c7d322.chunk.js.map