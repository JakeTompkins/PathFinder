{"version":3,"sources":["components/node.jsx","queue/index.js","cell/index.js","components/instructions.js","containers/knownGrid.jsx","stack/index.js","containers/unknownGrid.jsx","containers/gridSwitcher.jsx","App.js","index.js"],"names":["Node","_this$props","this","props","passable","start","end","passed","hidden","distance","react_default","a","createElement","className","concat","onClick","Component","Queue","node","_this","Object","classCallCheck","push","head","next","length","tail","unshift","nodeObj","Cell","options","togglePassable","togglePassed","setDistance","setVisited","visited","toggleHidden","row","col","instructions","text","Grid","possibleConstructorReturn","getPrototypeOf","call","populateMatrix","matrix","height","width","arr","cell","setState","setRandomStartAndEnd","getCell","state","getRandomCell","_this$props2","Math","floor","random","getAdjacents","_this$props3","nextStep","adjacents","min","minCell","forEach","currentCell","intId","setInterval","clearInterval","onCellClick","onStartClick","buildMap","onResetClick","_this2","queue","_loop","_this3","rowNum","map","key","Stack","item","array","pop","UnknownGrid","r","c","randomCell","lookUp","lookDown","lookLeft","lookRight","getNextAdjacent","candidates","filter","endCell","adj","stack","noPath","nextCell","GridSwitcher","nextGrid","oldState","shownGridIndex","grids","index","Fragment","id","App","gridSwitcher","knownGrid","unknownGrid","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.18c7d322.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Node extends Component {\n\n  render() {\n    const { passable, start, end, passed, distance, hidden } = this.props\n    return (\n      <div className={`node${passable ? \"\" : \" unpassable\"}${start ? \" start\" : \"\"}${end ? \" end\" : \"\"}${passed ? \" passed\" : \"\"}${hidden ? \" hidden\" : \"\"}`}\n        onClick={this.props.onClick} />\n    )\n  }\n}\n\nexport default Node","class Queue {\n  constructor(node) {\n    this.head = { node, next: null }\n    this.length = 1\n  }\n\n  push = node => {\n    if (!this.head) {\n      this.head = { node, next: null }\n      this.length++\n      return\n    }\n\n    let tail = this.head\n\n    while (tail.next != null) {\n      tail = tail.next\n    }\n\n    tail.next = { node, next: null }\n    this.length++\n  }\n\n  unshift = () => {\n    const nodeObj = this.head\n    this.head = this.head.next\n    this.length--\n\n    return nodeObj.node\n  }\n}\n\nexport default Queue","class Cell {\n  constructor(options) {\n    this.row = options.row\n    this.col = options.col\n    this.passable = options.passable === null ? true : options.passable\n    this.passed = false\n    this.distance = null\n    this.hidden = options.hidden || false\n    this.visited = false\n  }\n\n  togglePassable = () => {\n    this.passable = !this.passable\n  }\n\n  togglePassed = () => {\n    this.passed = !this.passed\n  }\n\n  setDistance = distance => {\n    this.distance = distance\n  }\n\n  setVisited = () => {\n    this.visited = true\n  }\n\n  toggleHidden = () => {\n    this.hidden = !this.hidden\n  }\n}\n\nexport default Cell","import React from 'react'\n\nexport default props => {\n  return (\n    <p className=\"instructions\">{props.text}</p>\n  )\n}","import React, { Component } from 'react'\nimport Node from \"../components/node\"\nimport Queue from '../queue'\nimport Cell from \"../cell\"\nimport Instructions from \"../components/instructions\"\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      matrix: [],\n      start: null,\n      end: null\n    }\n\n    this.instructions = \"This is a Breadth-First algorithm used to determine the shortest possible route from the green start square to the red end square. It assumes that the computer has knowledge of the full state of the board. Create a maze for it to solve by clicking on squares to make them unpassable. Be sure not to block either square in completely!\"\n  }\n\n  componentDidMount() {\n    this.populateMatrix()\n  }\n\n  populateMatrix = () => {\n    const matrix = []\n    const { height, width } = this.props\n\n    for (let row = 0; row < height; row++) {\n      const arr = []\n\n      for (let col = 0; col < width; col++) {\n        const cell = new Cell({ row, col })\n        cell.passable = true;\n\n        arr.push(cell)\n      }\n\n      matrix.push(arr)\n    }\n\n    this.setState({\n      matrix\n    }, () => {\n      this.setRandomStartAndEnd()\n    })\n  }\n\n  getCell = (row, col) => {\n    return this.state.matrix[row][col]\n  }\n\n  getRandomCell = () => {\n    const { height, width } = this.props\n    const row = Math.floor(Math.random() * height)\n    const col = Math.floor(Math.random() * width)\n\n    return this.getCell(row, col)\n  }\n\n  setRandomStartAndEnd = () => {\n    const start = this.getRandomCell()\n    const end = this.getRandomCell()\n\n    if (start === end) {\n      return this.setRandomStartAndEnd()\n    }\n\n    end.setDistance(0)\n\n    this.setState({\n      start,\n      end\n    })\n  }\n\n  getAdjacents = cell => {\n    const { row, col } = cell\n    const { height, width } = this.props\n\n    const top = row > 0 ? this.getCell(row - 1, col) : null\n    const bot = row < height - 1 ? this.getCell(row + 1, col) : null\n    const left = col > 0 ? this.getCell(row, col - 1) : null\n    const right = col < width - 1 ? this.getCell(row, col + 1) : null\n\n    return [top, bot, left, right]\n  }\n\n  buildMap() {\n    const queue = new Queue(this.state.end)\n\n    while (queue.length > 0) {\n      let currentCell = queue.unshift()\n      let adjacents = this.getAdjacents(currentCell)\n\n      adjacents.forEach(cell => {\n        if (cell === null || cell.distance != null || !cell.passable) { return }\n        cell.setDistance(currentCell.distance + 1)\n        queue.push(cell)\n      })\n    }\n\n    this.setState(this.state, () => {\n      this.start()\n    })\n  }\n\n  nextStep = cell => {\n    const adjacents = this.getAdjacents(cell)\n\n    let min = null\n    let minCell = null\n\n    adjacents.forEach(cell => {\n      if (cell === null || cell.distance === null) { return }\n      if (min === null || min > cell.distance) {\n        min = cell.distance\n        minCell = cell\n      }\n    })\n\n    return minCell\n  }\n\n  start = () => {\n    let currentCell = this.state.start\n\n    const intId = setInterval(() => {\n\n      currentCell = this.nextStep(currentCell)\n      if (currentCell === this.state.end || currentCell === null) {\n        return clearInterval(intId)\n      }\n      currentCell.togglePassed()\n      this.setState(this.state)\n    }, 250)\n\n    this.setState({\n      intId\n    })\n  }\n\n  onCellClick = (cell) => {\n    cell.togglePassable()\n    this.setState(this.state)\n  }\n\n  onStartClick = () => {\n    this.buildMap()\n  }\n\n  onResetClick = () => {\n    clearInterval(this.state.intId)\n    this.populateMatrix()\n  }\n\n  render() {\n    let rowNum = 0\n    return (\n      <div className=\"grid\">\n        {\n          this.state.matrix.map(row => {\n            rowNum++\n            return (\n              <div className=\"row\"\n                key={rowNum}>\n                {\n                  row.map(cell => {\n                    return <Node\n                      key={`${cell.row}${cell.col}`}\n                      passed={cell.passed}\n                      passable={cell.passable}\n                      start={cell === this.state.start}\n                      end={cell === this.state.end}\n                      hidden={cell.hidden}\n                      onClick={() => this.onCellClick(cell)}\n                    />\n                  })\n                }\n              </div>\n            )\n          })\n        }\n        {\n          <Instructions text={this.instructions} />\n        }\n        <div className=\"buttonRow\">\n          <div className=\"button\"\n            onClick={() => { this.onStartClick() }}>Start</div>\n          <div className=\"button\"\n            onClick={() => { this.onResetClick() }}>Reset</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Grid","class Stack {\n  constructor(item) {\n    this.array = item ? [item] : []\n    this.length = this.array.length\n  }\n\n  push = item => {\n    this.array.push(item)\n    this.length++\n  }\n\n  pop = () => {\n    this.length--\n    return this.array.pop()\n  }\n}\n\nexport default Stack\n","import React, { Component } from 'react'\nimport Stack from \"../stack\"\nimport Node from \"../components/node\"\nimport Cell from \"../cell\"\nimport Instructions from \"../components/instructions\"\n\nclass UnknownGrid extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      matrix: [],\n      start: null,\n      end: null,\n      noPath: false,\n      intId: null\n    }\n\n    this.instructions = \"This is a Depth-First algorithm used to find a path from the green start square to the red end square. The path it finds will not be optimized due to the computer only being aware of squares that it has traversed. The maze is randomly generated and will sometimes be unpassable, in which case the path will retrace to the start square and come to an end.\"\n  }\n\n  componentDidMount() {\n    this.populateMatrix()\n  }\n\n  populateMatrix = () => {\n    const { height, width } = this.props\n    const matrix = []\n\n    for (let r = 0; r < height; r++) {\n      const row = []\n\n      for (let c = 0; c < width; c++) {\n        const passable = !(Math.floor(Math.random() * 11) < 4)\n        const cell = new Cell({\n          hidden: true,\n          passable,\n          row: r,\n          col: c\n        })\n\n        row.push(cell)\n      }\n\n      matrix.push(row)\n    }\n\n    this.setState({\n      matrix\n    }, () => {\n      this.setRandomStartAndEnd()\n    })\n  }\n\n  getCell = (row, col) => {\n    return this.state.matrix[row][col]\n  }\n\n  randomCell = () => {\n    const { height, width } = this.props\n    const row = Math.floor(Math.random() * height)\n    const col = Math.floor(Math.random() * width)\n\n    return this.getCell(row, col)\n  }\n\n  setRandomStartAndEnd = () => {\n    const start = this.randomCell()\n    const end = this.randomCell()\n\n    if (start === end) {\n      return this.setRandomStartAndEnd()\n    }\n\n    start.passable = true\n    start.hidden = false\n    end.passable = true\n    end.hidden = false\n\n    this.setState({\n      start,\n      end\n    })\n  }\n\n  lookUp = cell => {\n    const { row, col } = cell\n    const up = row > 0 ? this.state.matrix[row - 1][col] : null\n\n    return up\n  }\n\n  lookDown = cell => {\n    const { row, col } = cell\n    const down = row < this.props.height - 1 ? this.state.matrix[row + 1][col] : null\n\n    return down\n  }\n\n  lookLeft = cell => {\n    const { row, col } = cell\n    const left = col > 0 ? this.state.matrix[row][col - 1] : null\n\n    return left\n  }\n\n  lookRight = cell => {\n    const { row, col } = cell\n    const right = col < this.props.width - 1 ? this.state.matrix[row][col + 1] : null\n\n    return right\n  }\n\n  getNextAdjacent = cell => {\n    const up = this.lookUp(cell)\n    const down = this.lookDown(cell)\n    const left = this.lookLeft(cell)\n    const right = this.lookRight(cell)\n\n    let candidates = [up, down, left, right].filter(cell => cell && !cell.visited)\n\n    const endCell = candidates.filter(cell => cell === this.state.end)\n\n    return endCell.length > 0 ? endCell[0] : candidates[Math.floor(Math.random() * candidates.length)]\n  }\n\n  nextStep = cell => {\n    const adj = this.getNextAdjacent(cell)\n    if (adj) {\n      if (adj !== this.state.start && adj !== this.state.end) {\n        adj.toggleHidden()\n        this.setState(this.state)\n      }\n    } else {\n      return null\n    }\n\n    if (!adj.passable) {\n      adj.setVisited()\n      return this.nextStep(cell)\n    } else {\n      return adj\n    }\n  }\n\n  start = () => {\n    const stack = new Stack(this.state.start)\n    let currentCell = this.state.start\n    currentCell.setVisited()\n\n    const intId = setInterval(() => {\n      const noPath = !currentCell\n\n      this.setState({ noPath, intId })\n\n      if (noPath || currentCell === this.state.end) {\n        return clearInterval(intId)\n      }\n\n      const nextCell = this.nextStep(currentCell)\n\n      if (!nextCell) {\n        currentCell.togglePassed()\n        currentCell = stack.pop()\n        return\n      } else {\n        stack.push(currentCell)\n        currentCell = nextCell\n        currentCell.setVisited()\n        currentCell.togglePassed()\n      }\n\n      this.setState(this.state)\n    }, 250);\n  }\n\n  onStartClick = () => {\n    this.start()\n  }\n\n  onResetClick = () => {\n    clearInterval(this.state.intId)\n    this.populateMatrix()\n  }\n\n  render() {\n    let rowNum = 0\n    return (\n      <div className=\"grid\">\n        {\n          this.state.matrix.map(row => {\n            rowNum++\n            return (\n              <div className=\"row\"\n                key={rowNum}>\n                {\n                  row.map(cell => {\n                    return <Node\n                      key={`${cell.row}${cell.col}`}\n                      passed={cell.passed}\n                      passable={cell.passable}\n                      start={cell === this.state.start}\n                      end={cell === this.state.end}\n                      hidden={cell.hidden}\n                    />\n                  })\n                }\n              </div>\n            )\n          })\n        }\n        {\n          <Instructions text={this.instructions} />\n        }\n        <div className=\"buttonRow\">\n          <div className=\"button\"\n            onClick={() => { this.onStartClick() }}>Start</div>\n          <div className=\"button\"\n            onClick={() => { this.onResetClick() }}>Reset</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default UnknownGrid","import React, { Component } from 'react'\n\nclass GridSwitcher extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      shownGridIndex: 0\n    }\n  }\n\n  nextGrid = () => {\n    this.setState(oldState => {\n      let { shownGridIndex } = oldState\n\n      shownGridIndex = shownGridIndex === this.props.grids.length - 1 ? 0 : shownGridIndex + 1\n\n      return { shownGridIndex }\n    })\n  }\n\n  render() {\n    const grids = this.props.grids\n    const index = this.state.shownGridIndex\n    return (\n      <>\n        {\n          grids[index]\n        }\n        <div className=\"button\"\n          id=\"switchButton\"\n          onClick={this.nextGrid}>\n          Switch Algorithms\n        </div>\n      </>\n    )\n  }\n}\n\nexport default GridSwitcher","import React from 'react';\nimport KnownGrid from './containers/knownGrid'\nimport UnknownGrid from \"./containers/unknownGrid\"\nimport GridSwitcher from \"./containers/gridSwitcher\"\n\nfunction App() {\n  return (\n    <div className=\"main\">\n      <h1 className=\"title\">PathFinder</h1>\n      <div className=\"container\">\n        <GridSwitcher\n          grids={[<KnownGrid height={10}\n            width={10} />,\n          <UnknownGrid\n            height={10}\n            width={10}\n          />]} />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}